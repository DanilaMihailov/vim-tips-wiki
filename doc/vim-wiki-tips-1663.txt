*vim-wiki-tips-1663.txt*   Buffers                                     *vwt-1663*

Tip 1663 [https://vim.fandom.com/wiki/Buffers]   Previous |vwt-1662| Next |vwt-1664|

created [https://vim.fandom.com/wiki/Vim_Tips_Wiki:New_tips/201008#Buffers] 
August 30, 2010 · complexity basic · version 7.0

==============================================================================

A buffer is an area of Vim's memory used to hold text read from a file. In 
addition, an empty buffer with no associated file can be created to allow the 
entry of text.

The `:e filename` command can edit an existing file or a new file. When a 
file is edited, the file is read into a new buffer that holds a temporary copy 
of the file (or an empty buffer for a new file). Editing makes changes to the 
buffer. To save a file, the original file is replaced by writing the buffer to 
disk.

The `:new` command creates a new window displaying the contents of a new 
(empty) buffer.

To list all buffers use the `:ls` command. Each buffer is assigned a number 
that is displayed in the first column.

The second column describes the state of the buffer. The different states are 
explained at :help |:ls|. The third column is the file name associated with 
the buffer.

OVERVIEW                                                   *vwt-1663-overview*

The image shows a session of Vim created with these steps:

In the image, the label for the current tab shows `4 example.txt` because 
there are four windows in the tab, and the cursor is in window 3 which shows 
the buffer for file `example.txt`. This label results from the default setting 
of 'guitablabel'; see here 
[https://vim.fandom.com/wiki/Show_tab_number_in_your_tab_line] for an example 
of changing the default.

WORKING WITH BUFFERS                           *vwt-1663-working-with-buffers*

The commands `:bnext` and `:bprev` allow changing between buffers, but are 
not convenient. They can be shortened to `:bn` and `:bp` respectively.

The `:b` command can also accept either a number or a string argument 
specifying which buffer to display. The buffers are numbered as they are 
created and can be viewed in a list using `:buffers`. Supplying a number after 
`:b` brings up that buffer e.g. `:b2`. Or if you have already typed 
`:buffers`, you can just type the appropriate number after seeing the list.

If a string is supplied, the buffer with a matching file name is displayed. 
You do not need to write the full name of the file as the best match will be 
used. After typing the first couple of characters, you can press Tab for 
completion of the name. For example, if a buffer is named example.txt, typing 
`:b ex` and pressing Enter will switch to the example.txt buffer, provided no 
other buffer matches "ex". If the command fails (because more than one buffer 
matches), press `:` then Up arrow to recall the command, then press Tab to 
choose the wanted name.

JUMPING AROUND                                       *vwt-1663-jumping-around*

Vim keeps a history of all the jumps you make in your buffers. You can go to 
any place you jumped from with the Ctrl-O and Ctrl-I command (normal mode). 
This also works across buffers.

To toggle between the current and the last buffer use the Ctrl-^ (normal 
mode) command (on most keyboards, hold down Ctrl and press the 6 key on the 
main keyboard).

SPLITS                                                       *vwt-1663-splits*

You can use `:split` and `:vsplit` to divide the current area into two 
windows with the same buffer. If you supply an argument then one of the new 
windows is created with the argument as a file name used for the buffer in the 
new window

To gain more control over how the splits are created, you can combine the 
`:vertical`, `:leftabove` and `:rightbelow` commands. Also of use are the the 
`:sfind` and `:sb` commands.

EXAMPLES                                                   *vwt-1663-examples*

:vertical sb 3
Create a vertical split and show buffer number 3 in the window to the left.

:vertical rightbelow sfind file.txt
Create a vertical split and read file.txt into the buffer in the right window.

:rightbelow sfind file.txt
Create a horizontal split and read file.txt into the buffer in the bottom window.

NAVIGATING SPLITS                                 *vwt-1663-navigating-splits*

Use Ctrl-W followed by one of the `hjkl` movement keys.

MANAGING BUFFERS                                   *vwt-1663-managing-buffers*

Buffers are a convenient way to manage multiple files within a project in 
Vim. If you are managing multiple projects, consider opening a separate Vim 
for each project. This way each Vim instance contains only related buffers in 
the buffer list. This is an advantage over other methods for managing multiple 
files; such as a combination of buffers, windows 
[https://vim.fandom.com/wiki/Category:Split_windows], and tabs 
[https://vim.fandom.com/wiki/Category:Tabs].

Here are the essential buffer commands:

There are many plugins for managing buffers, but it is often easier to just 
use the above commands. Enter `:ls` to list the buffers, then (while the list 
is still displayed), enter a command like `:b12` to display buffer 12 (no 
space is needed).

SEE ALSO                                                   *vwt-1663-see-also*
    - Easier buffer switching [https://vim.fandom.com/wiki/Easier_buffer_switching] 
    - Vim buffer FAQ [https://vim.fandom.com/wiki/Vim_buffer_FAQ] 


COMMENTS                                                   *vwt-1663-comments*

 vim:tw=78:et:ft=help:norl: