*vim-tips-wiki-83.txt*   Indenting source code                           *vtw-83*

Tip 83 [https://vim.fandom.com/wiki/Indenting_source_code]   Previous |vtw-82| Next |vtw-84|

created 2001 · complexity basic · author Eugene Huang · version 6.0

==============================================================================

The indent features of Vim are very helpful for indenting source code. This 
tip discusses settings that affect indentation. These settings mostly affect 
the automatic indentation which Vim inserts as you type, but also can be 
triggered manually with the |=| operator, so that you can easily Fix 
indentation [https://vim.fandom.com/wiki/Fix_indentation] in your buffer.

For related information, see:
    - Shifting blocks visually |vtw-224| commands to change indents 
    - How to stop auto indenting |vtw-330| how to stop your indents from being 
      changed 
    - Restoring indent after typing hash |vtw-644| problems when typing `#` 
    - Toggle auto-indenting for code paste |vtw-906| to avoid broken indents when 
      pasting in a terminal 


SETUP                                                           *vtw-83-setup*

INDENTATION WITHOUT HARD TABS           *vtw-83-indentation-without-hard-tabs*

For indentation without tabs, the principle is to set 'expandtab', and set 
'shiftwidth' and 'softtabstop' to the same value, while leaving 'tabstop' at 
its default value:

>
    set expandtab
    set shiftwidth=2
    set softtabstop=2
<

These settings will result in spaces being used for all indentation.

INDENTATION PURELY WITH HARD TABS   *vtw-83-indentation-purely-with-hard-tabs*

For indentation purely with hard tabs, the principle is to set 'tabstop' and 
'shiftwidth' to the same value, and to leave 'expandtab' at its default value 
('noexpandtab'), and leave 'softtabstop' unset:

>
    set shiftwidth=2
    set tabstop=2
<

These settings will result in hard tabs being used for all indentation.

INDENTATION WITH MIXED TABS AND SPACES *vtw-83-indentation-with-mixed-tabs-and-spaces*

For indentation with mixed tabs and spaces, the principle is to set 
'shiftwidth' and 'softtabstop' to the same value, leave 'expandtab' at its 
default ('noexpandtab'). Usually, 'tabstop' is left at its default value:

>
    set shiftwidth=2
    set softtabstop=2
<

These settings will cause as many hard tabs as possible being used for 
indentation, and spaces will be used to fill in the remains. If you want to 
distinguish between "indentation" and "alignment", i.e., the number of hard 
tabs equals the indentation level, use the Smart Tabs |vtw-1626| plug-in.

EXPLANATION OF THE OPTIONS                 *vtw-83-explanation-of-the-options*

Vim's different indentation options are an endless source of grief and 
confusion for new users. There are plenty of example vimrcs 
[https://vim.fandom.com/wiki/Vimrc] out there that will tell you how theirs is 
the proper setup. More often than not, they are misguided. Let `:help` be your 
reference, and this page be your guide to Vim's indentation options.
    - 'tabstop' changes the width of the `TAB` character, plain and simple. 
    - 'softtabstop' affects what happens when you press the <TAB> or <BS> keys. Its 
      default value is the same as the value of 'tabstop', but when using 
      indentation without hard tabs or mixed indentation, you want to set it to the 
      same value as 'shiftwidth'. If 'expandtab' is unset, and 'tabstop' is 
      different from 'softtabstop', the <TAB> key will minimize the amount of spaces 
      inserted by using multiples of `TAB` characters. For instance, if 'tabstop' is 
      8, and the amount of consecutive space inserted is 20, two `TAB` characters 
      and four spaces will be used. 
    - 'shiftwidth' affects what happens when you press >>, `<<` or `==`. It also 
      affects how automatic indentation works. (See below.) 
    - 'expandtab' affects what happens when you press the <TAB> key. If 'expandtab' 
      is set, pressing the <TAB> key will always insert 'softtabstop' amount of 
      space characters. Otherwise, the amount of spaces inserted is minimized by 
      using `TAB` characters. 
    - 'smarttab' affects how <TAB> key presses are interpreted depending on where 
      the cursor is. If 'smarttab' is on, a <TAB> key inserts indentation according 
      to 'shiftwidth' at the beginning of the line, whereas 'tabstop' and 
      'softtabstop' are used elsewhere. There is seldom any need to set this option, 
      unless it is necessary to use hard `TAB` characters in body text or code. 


CONSIDERATIONS                                         *vtw-83-considerations*

Using a 'tabstop' value other than the default (8 spaces), will result in 
your file having a different appearance when using tools such as `cat` (`type` 
on Windows), which can't use a custom width tab character. On the other hand, 
using hard tabs for indentation, allows others to view your code with the 
amount of indentation they prefer. Which of these considerations should have 
priority, is a matter of personal preference (and company policy).

METHODS FOR AUTOMATIC INDENTATION   *vtw-83-methods-for-automatic-indentation*

There are a number of methods enabling automatic indentation in Vim, ranging 
from fairly "stupid" and unintrusive ones, like 'autoindent' and 
'smartindent', to complex ones such as 'cindent' and custom indentation based 
on filetype using 'indentexpr'. The amount of indentation used for one level 
is controlled by the 'shiftwidth' option. (See above.)

'AUTOINDENT'                                             *vtw-83-'autoindent'*

'autoindent' does nothing more than copy the indentation from the previous 
line, when starting a new line. It can be useful for structured text files, or 
when you want to control most of the indentation manually, without Vim 
interfering.

'autoindent' does not interfere with other indentation settings, and some 
file type based indentation scripts even enable it automatically.

'SMARTINDENT' AND 'CINDENT'               *vtw-83-'smartindent'-and-'cindent'*

'smartindent' automatically inserts one extra level of indentation in some 
cases, and works for C-like files. 'cindent' is more customizable, but also 
more strict when it comes to syntax.

'smartindent' and 'cindent' might interfere with file type based indentation, 
and should never be used in conjunction with it.

When it comes to C and C++, file type based indentations automatically sets 
'cindent', and for that reason, there is no need to set 'cindent' manually for 
such files. In these cases, the 'cinwords', 'cinkeys' and 'cinoptions' options 
still apply.

Generally, 'smartindent' or 'cindent' should only be set manually if you're 
not satisfied with how file type based indentation works.

FILE TYPE BASED INDENTATION               *vtw-83-file-type-based-indentation*

This type of indentation is the most flexible, as it allows users to 
customize indentation per file type. You enable this type of automatic 
indentation with the following command:` filetype plugin indent on `. This 
command will use indentation scripts located in the `indent` folder of your 
vim installation.

For instance, the indentation scripts for C and C++ file types properly set 
the 'cindent' option, and there are very competent indentation scripts for 
Ruby, Perl and many other languages and file types. File type based 
indentation even works correctly with `Makefile`s without interference!

If you plan on using file type based indentation, don't set 'smartindent' or 
'cindent'. You may still set 'autoindent', since it doesn't interfere.

The `vimrc_example.vim` that ships with Vim enables filetype based 
indentation:

>
    if has("autocmd")
      " Enable file type detection.
      " Use the default filetype settings, so that mail gets 'tw' set to 72,
      " 'cindent' is on in C files, etc.
      " Also load indent files, to automatically do language-dependent indenting.
      filetype plugin indent on
      " ...
    endif
<

DIFFERENT SETTINGS FOR DIFFERENT FILE TYPES *vtw-83-different-settings-for-different-file-types*

You may want indentation for html files to use tabs with 2-columns per 
indent, while Python files use spaces with 4-columns per indent. To apply 
suitable settings automatically, first enable file type detection with the 
following in your vimrc [https://vim.fandom.com/wiki/Vimrc]:

>
    filetype plugin indent on
<

Create file `html.vim` with contents:

>
    setlocal shiftwidth=2
    setlocal tabstop=2
<

and file `python.vim` with contents:

>
    setlocal expandtab
    setlocal shiftwidth=4
    setlocal softtabstop=4
<

The `html.vim` and `python.vim` files should be in this directory (which you 
may need to create):
    - `~/.vim/after/ftplugin` on Unix-based systems; or 
    - `$HOME/vimfiles/after/ftplugin` on Windows systems 


The standard plugins probably do not change settings such as `shiftwidth`, 
and in that case the directory `~/.vim/ftplugin` (or 
`$HOME/vimfiles/ftplugin`) would work as an alternative. However the "after" 
directory should be used because you intend to override settings from other 
plugins.

Using the "after" directory as above is recommended, but it is possible to 
put commands such as the following in your vimrc 
[https://vim.fandom.com/wiki/Vimrc] as an alternative:

>
    autocmd FileType html setlocal shiftwidth=2 tabstop=2
    autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4
<

REFERENCES                                                 *vtw-83-references*
    - :help |shift-left-right| 
    - :help |=| 
    - :help |i_CTRL-T| 
    - :help |i_CTRL-D| 
    - :help |i_CTRL-F| 
    - :help |movement| 
    - :help |text-objects| 
    - :help |visual-mode| 
    - :help |cmdline-ranges| 


SEE ALSO                                                     *vtw-83-see-also*
    - 1231 Set indent parameters for Python files |vtw-1231| adjust Vim's indent 
      settings to match each file edited (more than Python) 


TO DO
    - Merge some of following tips. 

    - 221 Indenting Java throw statements |vtw-221| 
    - 247 Preexisting code indentation |vtw-247| 
    - 700 Indenting for Java |vtw-700| 
    - 909 Easy indenting in insert and normal mode with no cursor displacement 
      |vtw-909| 
    - 1213 Better indent support for php with html |vtw-1213| 

    - 522 Fix an autoindent error |vtw-522| 
    - 551 Automatically indent an XML file using XSLT |vtw-551| 

    - 1014 Visual selection of indent block |vtw-1014| 
    - 1269 Indent text object |vtw-1269| 

    - 103 Move to next/previous line with same indentation |vtw-103| 
    - 112 Back and forth between indented lines again |vtw-112| 
    - 477 Put the indentation level on the status line |vtw-477| 
    - 1168 Folding for plain text files based on indentation |vtw-1168| 


RELATED PLUGINS                                       *vtw-83-related-plugins*
    - Indent Finder [https://www.vim.org/scripts/script.php?script_id=513] always 
      set the correct indentation for the file you are editing. It requires a Python 
      enabled Vim. 
    - YAIFA [https://www.vim.org/scripts/script.php?script_id=3096] is a VimL port 
      of Indent Finder [https://www.vim.org/scripts/script.php?script_id=513], so it 
      doesn't need Python to work. 
    - DetectIndent [https://www.vim.org/scripts/script.php?script_id=1171] 
      automatically detects indent settings. 
    - IndentConsistencyCop [https://www.vim.org/scripts/script.php?script_id=1690] 
      checks the whole buffer or a given range of it for indentation consistency. 
    - Coding_style [https://www.vim.org/scripts/script.php?script_id=2633] allows 
      setting indent styles per project. 
    - vim-pasta [https://github.com/sickill/vim-pasta] allows for pasting with 
      automatic adjusting of indentation to destination context. 
    - sleuth [https://www.vim.org/scripts/script.php?script_id=4375] detects indent 
      from existing files, or from other files of the same type in the same 
      directory for new files. 


COMMENTS                                                     *vtw-83-comments*

The following should be merged to 224 (or maybe this tip), or deleted:
    - 522 Fix an autoindent error |vtw-522| Nice piece of code, but is the content 
      worth keeping? I do not know what scenario it describes or what it achieves. 
      JohnBeckett [https://vim.fandom.com/wiki/User:JohnBeckett] 10:06, 12 August 
      2009 (UTC) 


The coding_style [https://www.vim.org/scripts/script.php?script_id=2633] 
plugin allows to set indent styles per project. Maybe it's worth mentionning 
here? Chikamichi [https://vim.fandom.com/wiki/User:Chikamichi] 22:22, 
September 12, 2009 (UTC)

I think that's too involved for an introduction tip like this one. (Spiiph 08:57, October 14, 2009 (UTC))
I agree that it shouldn't be in the tip proper, but we often have a "related plugins" section where people can add links to plugins related to the tip with a brief description. I have done this, above. We should probably also link to the plugnis that are mentioned in the tip here, for easy reference. --Fritzophrenic 13:44, October 14, 2009 (UTC)

 vim:tw=78:et:ft=help:norl: