*vim-wiki-tips-683.txt*   Integrate gvim with Visual Studio *vwt-683*

Tip 683 [https://vim.fandom.com/wiki/Integrate_gvim_with_Visual_Studio]   Previous |vwt-682| Next |vwt-685|

created 2004 · complexity intermediate · author Jon Heiner · version 6.0

==============================================================================

On Windows systems, there are several ways to integrate Vim with Microsoft 
Visual Studio.

INTEGRATION OF VIM WITH VISUAL STUDIO 2003 AND LATER *vwt-683-integration-of-vim-with-visual-studio-2003-and-later*

CONTROL VISUAL STUDIO FROM VIM        *vwt-683-control-visual-studio-from-vim*

Script visual_studio.vim 
[https://www.vim.org/scripts/script.php?script_id=864] includes features:
    - Compatible with Visual Studio 2003, 2005, 2008, and 2010 
    - Control Visual Studio from within Vim. 
    - Load the current Visual Studio file into Vim. 
    - Load the current Vim file into Visual Studio. 
    - Compile the current file (C/C++) within Vim. 
    - Build the current project (C/C++/C#) within Vim. 
    - Load results from Visual Studio into the Vim quickfix file. 


IF YOU GET ERRORS, especially E887, you may need to copy some pywin32 files 
around to allow your system to find them. See 
http://code.google.com/p/vim-visual-studio/issues/detail?id=2 
[http://code.google.com/p/vim-visual-studio/issues/detail?id=2] and 
http://stackoverflow.com/a/20017920/1390430 
[http://stackoverflow.com/a/20017920/1390430].

MAKING VISUAL STUDIO'S EDITOR WORK LIKE VIM *vwt-683-making-visual-studio's-editor-work-like-vim*

ViEmu for Visual Studio [http://www.viemu.com/] is commercial software that 
emulates Vim editing commands within Visual Studio (Vim is not used).

VsVim 
[http://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329] 
is an open source Vim emulator (code at https://github.com/jaredpar/VsVim 
[https://github.com/jaredpar/VsVim] ). It is only available for all editions 
of Visual Studio 2010, 2012, 2013 and 2015 excluding Express Edition, and as 
with viemu does not use Vim.

VIM AS AN EXTERNAL TOOL                      *vwt-683-vim-as-an-external-tool*

If you like Vim and use MS Visual Studio .NET for debugging and want a 
lightweight way to open the file you're currently debugging in VS in Vim, you 
can add Vim as an external tool. This will let you use a single keystroke to 
open the current VS file in vim with the cursor at the same line and even at 
the same column.

The Tool: In Visual Studio, Tools > External Tools > Add:
    - Title: `&Vim` 
    - Command: `C:\Vim\vim73\gvim.exe` 
    - Arguments: 


>
    --servername gVimStudio --remote-silent +"execute 'normal! $(CurLine)G$(CurCol)|'" "$(ItemFileName)$(ItemExt)"
<

>
    NOTE: for visual Studio 2017 I needed to use:
<

>
    --servername gVimStudio --remote-silent +"execute 'normal! $(CurLine)G$(CurCol)|'" "$(ItemPath)"
<
    - Initial directory: `$(ItemDir)` 


Note that, if you are using tabs for indenting, this will only place the 
cursor on the correct column if you have tabs set to display as the same width 
in both Vim and Visual Studio.

If you have other settings you'd like to apply (like normal zz to centre the 
cursor or updating path for :find 
[https://vim.fandom.com/wiki/Project_browsing_using_find], then you can put 
them in $HOME/vimfiles/visualstudioinvoke.vim and add +"runtime 
visualstudioinvoke.vim" before $(ItemFileName). `$HOME` is either the %HOME% 
environment variable if one is defined, or Vim determines an appropriate 
directory which you can see by doing `:echo $HOME` within Vim.

The Shortcut: In Visual Studio, Tools -> Options -> Environment -> Keyboard:
    - Command: ExternalCommand1 (it's easiest if you move your Vim external tool to 
      be the first, otherwise use the correct index). 
    - Shortcut key: F1 


This will allow you to use your key combination to open the current file at 
the current line and cursor in a new vim browser. The browser will start at 
the directory of that file, so ':e .' will edit the directory of that file.

Remove the `--servername VimStudio` part if you want it to open a new 
instance of Vim each time.

Preventing Nagging: In order to effectively use the two together and make 
sure .NET does not complain about its files changing, goto Tools > Options > 
Environment > Documents and ensure these two options are checked:
    - Detect when file is changed outside the environment. 
    - Auto-load changes (if not currently modified inside the environment). 


In your visualstudioinvoke.vim, enable autoread so vim will update files when 
they're modified in Visual Studio:

>
    set autoread
<

See Use Vim like an IDE [https://vim.fandom.com/wiki/Use_Vim_like_an_IDE] for 
some useful plugins to help you stay in Vim longer.

Note: Only old versions of Vim include sendtovim.exe.

The Tool: In Visual Studio, Tools > Customize > Tools:
    - Title: `&Vim` 
    - Command: `C:\Vim\vim51\sendtovim.exe` 
    - Arguments: <c-z>:cd $(FileDir)<CR>:e $(FilePath)<CR>:$(CurLine)<CR> 
    - Initial directory: `$(FileDir)` 


Note: <c-z> brings gvim to foreground - on win2k, gvim gets focus but won't 
bring itself to foreground otherwise. You can remove it if you don't have this 
bring-to-foreground problem.

These arguments work better as for some reason the above ones break.
    - Arguments: `--remote-silent +"call cursor($(CurLine),$(CurCol))" 
      $(ItemFileName)$(ItemExt)` 


OPENING VIM FILE IN VISUAL STUDIO  *vwt-683-opening-vim-file-in-visual-studio*

Much like Vim's `--remote`, you can run devenv with the edit parameter to 
open a file in an existing Visual Studio. This command abbreviation opens the 
file you are currently editing, but doesn't transfer line or column postition.

>
    :cabbrev vsedit :!start "c:\Program Files\Microsoft Visual Studio 8\Common7\ide\devenv.exe" /edit "%"
<

See also Using DDE to open the current Vim file in Visual Studio 
[https://vim.fandom.com/wiki/Using_DDE_to_open_the_current_Vim_file_in_Visual_Studio].

USE VIM INSTEAD OF VISUAL STUDIO'S EDITOR *vwt-683-use-vim-instead-of-visual-studio's-editor*

This is not the same as Embedding vim in Visual Studio 
[https://vim.fandom.com/wiki/Embedding_vim_in_Visual_Studio].
    - Open a solution in VS.Net. 
    - In the solution explorer (View->Solution or Ctrl + R), you should see a list 
      of files (click on the "Solution Explorer" tab if you do not see the file 
      list). 
    - Right click on any of the files and choose "Open With...", this brings up the 
      Open With dialog. 
    - Click on "Add..." this brings up the Add Program dialog. 
    - Click on "Browse..." and point the Browse dialog to your gvim location. 
    - You have now added gvim to the list of editors, you may also select gvim to 
      be the default editor for that file type. 


You may need to do this for all file types you wish to edit with gvim. And 
yes you still have VS.Net open the file in its own editor.

Of course if you want to reverse changes simply remove gvim from the list of 
editors; but why would you want to do that?

WINDOW SIZE                                              *vwt-683-window-size*

VS.net opens the window in the middle of the screen and at the location and 
size of the its "source pane". How can I adjust where and of what size is the 
vim window when it opens? You can control your window size in your vimrc:

>
    gui
    winpos 33 0
    set lines=100
<

You can restrict this to files of a certain type by adding the above lines to 
a .vim file in your ftplugin directory. (For example in 
~/.vim/ftplugin/cpp.vim for c++ files in visual studio.)

EDITING IN A SINGLE VIM                      *vwt-683-editing-in-a-single-vim*

If VS.Net insists on opening each file in a new vim window, you may be able 
to force it to open each file in the same window by using a batch file instead 
of gvim to use vim's server-client functionality. Try this:

>
    pathtovim\gvim.exe --servername VimStudio --remote-silent %*
<

INTEGRATION OF VIM WITH PRE-2003 VERSIONS OF VISUAL STUDIO *vwt-683-integration-of-vim-with-pre-2003-versions-of-visual-studio*
    - VisVim for Visual Studio 
      [https://vim.fandom.com/wiki/VisVim_for_Visual_Studio] 
    - Using DDE to open the current Vim file in Visual Studio 
      [https://vim.fandom.com/wiki/Using_DDE_to_open_the_current_Vim_file_in_Visual_Studio] 
    - Embedding vim in Visual Studio 
      [https://vim.fandom.com/wiki/Embedding_vim_in_Visual_Studio] 


COMPILING FROM VIM                                *vwt-683-compiling-from-vim*

If you use nmake, you can use `compiler msvc` to set Vim's `errorformat` and 
`makeprg` for Visual C++. Use `compiler cs` for C#.

SEE ALSO                                                    *vwt-683-see-also*
    - Use Vim like an IDE [https://vim.fandom.com/wiki/Use_Vim_like_an_IDE] 
    - 345 Quickfix and Visual Studio and cygwin |vwt-345| 
    - 719 Use Python to build project in Visual Studio |vwt-719| 


REFERENCES                                                *vwt-683-references*
    - :help |--servername| 
    - :help |--remote| 
    - Visual Studio: Arguments for External Tools 
      [http://msdn.microsoft.com/en-us/library/ekbzk5f8(v=VS.100).aspx] 


COMMENTS                                                    *vwt-683-comments*

A note: On VS 2015, the definition of External tool didn't work for me using 
the recommended ItemFileName, had to use instead ItemPath

 vim:tw=78:et:ft=help:norl: