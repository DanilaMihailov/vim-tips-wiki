*vim-tips-wiki-1642.txt*   Bulk rename files with Vim                  *vtw-1642*

Tip 1642 [https://vim.fandom.com/wiki/Bulk_rename_files_with_Vim]   Previous |vtw-1641| Next |vtw-1643|

created 
[https://vim.fandom.com/wiki/Vim_Tips_Wiki:New_tips/200912#Bulk_rename_files_with_Vim] 
2009 · complexity basic · author Whiteinge · version 7.0

==============================================================================

You can use Vim to quickly rename many files at once. The steps are: create a 
list of files; change the list by constructing commands to rename each file; 
execute the commands. This is essentially an in-memory simplistic shell 
script.

UNIX SHELL                                               *vtw-1642-unix-shell*

CREATE LIST OF FILES                           *vtw-1642-create-list-of-files*

Starting at a shell prompt, you can send a list of file names to the standard 
input of Vim by entering:

>
    \ls | vim -
<

The backslash tells your shell to disregard any aliases for `ls`; we need 
plain output with no color. Vim will open, displaying a list of file names.

CHANGE TO LIST OF SHELL COMMANDS   *vtw-1642-change-to-list-of-shell-commands*

In Vim you now have one file name per line. We need to change each line to be 
a valid stand-alone shell command.

For example, to rename the files to lowercase:

>
    :%s/.*/mv -i & \L&/g
<

To append `.orig` to each file name:

>
    :%s/.*/mv -i & &.orig/g
<

To change all `.JPEG` extensions to `.jpg`:

>
    :%s/.*/mv -i & &/g
    :%s/.JPEG$/.jpg/g
<

To remove duplicate extensions:

>
    :%s/.*/mv -i & &/g
    :%s/.jpg.jpg$/.jpg/g
<

To substitute certain text in the filename:

>
    :%s/.*/\="mv -i ".submatch(0)." ".substitute(submatch(0), "foo", "bar", "g")/g
<

`\=` is substitute command expression. See VimTip755 |vtw-755| for more 
details.

Note: In case the file name contains space character, it should be surrounded 
with quotes.

You can use any Vim features here (macros |vtw-398| are useful), as long as 
each line results in a valid shell command.

EXECUTE THE COMMANDS                           *vtw-1642-execute-the-commands*

>
    :w !sh
<

The reason this works is Vim writes a file line-by-line. So if you started 
with a list of 100 file names, it will execute 100 `mv` commands. Sure there 
are utilities that may do this better, but Vim is always available and that's 
one less thing you have to remember.

An alternative method of executing the commands is:

>
    :%!bash
<

This will pipe the whole buffer to the system command `bash`, thus executing 
all of the move commands. This will also replace the file with the command's 
output, which is useful for commands besides `mv`. You can also visually 
select a small subset of lines, and only execute those commands:

>
    :'<,'>!bash
<

Again, this will replace the selected lines with the command's output which 
can be useful for some commands.

SEE ALSO                                                   *vtw-1642-see-also*
    - renamer.vim [https://www.vim.org/scripts/script.php?script_id=1721] plugin to 
      list and rename files 
    - vidir, emv, qmv 
      [https://www.reddit.com/r/vim/comments/24ju8p/vidir_a_tool_to_rename_files_with_vi/] 
      external tools which works with vim 


COMMENTS                                                   *vtw-1642-comments*

TO DO
    - Probably should generalise by adding a section for Windows. 


 vim:tw=78:et:ft=help:norl: