*vim-wiki-tips-767.txt*   Multiple commands at once *vwt-767*

Tip 767 [https://vim.fandom.com/wiki/Multiple_commands_at_once]   Previous |vwt-766| Next |vwt-768|

created 2004 · complexity basic · author pim · version 6.0

==============================================================================

You can execute more than one command by placing a | between two commands.

For example:

>
    %s/htm/html/c | %s/JPEG/jpg/c | %s/GIF/gif/c
<

This example substitutes for htm, then moves on to JPEG, then GIF.

The second command (and subsequent commands) are only executed if the prior 
command succeeds.

This works for most commands, but some commands like :argdo or :autocmd see 
the '|' as one of their arguments. This allows commands such as :argdo, which 
execute a different Vim command, to execute a series of commands. See :help 
|:\bar| for the full list of such commands.

For example:

>
    argdo %s/foo/bar/gc | w
<

Normally, Vim will complain if you haven't saved changes to a buffer before 
abandoning it, but by adding | w in the above example, you can actually write 
out each buffer after processing. Note that this command will, for each item 
in the arg list, do a :substitute and a :write. If :argdo didn't take '|' as 
an argument, it would instead run the :substitute on each item, then write the 
last item.

If you want to make a command chain including one of the commands listed at 
:help |:\bar|, you can still do so using the :execute command. For example, in 
order to chain a :normal command, you would need to do something like this:

>
    :execute 'normal "ayiw' | echo @a
<

If you want to chain commands from the vimrc file, then you need to use <bar> 
instead of | like this:

>
    map <F6> <ESC>:echo "test" <bar> :echo "test2"
<

REFERENCES  *vwt-767-references*
    -  :help  |:\bar|
    -  :help  |:execute|


COMMENTS  *vwt-767-comments*

what about the range? how can you specify one range, and then have a list of 
commands executed on that one range?

Normally, you'd pass the range to each command, like the "%" in the first example. Theoretically, you could put the commands in a function, then :call that function, and it would be invoked once for each line of the range, but I doubt that's what you're after. You could use my CommandWithMutableRange plugin, though: :[range]ExecuteWithMutableRange command1 | command2 | command3 -- Inkarkat 10:12, October 9, 2010 (UTC)

How do I do multiple commands if the previous one failed?

"The 'e' flag tells ":substitute" that not finding a match is not an error." —usr_12.txt, example: %s/from1/to1/ge | %s/from2/to2/ge | %s/from3/to3/ge --User000name (talk) 05:10, January 13, 2016 (UTC)
This will work for the :s command. For other commands, see below. Fritzophrenic (talk) 16:08, January 13, 2016 (UTC)

Try using silent! to suppress errors. Example: :exe "norm! yaw" | exe "silent! norm! b" | exe "norm! P" --Fritzophrenic (talk)

 vim:tw=78:et:ft=help:norl: