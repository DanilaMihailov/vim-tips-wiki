*vim-wiki-tips-95.txt*   Capture ex command output *vwt-95*

Tip 95 [https://vim.fandom.com/wiki/Capture_ex_command_output]   Previous |vwt-94| Next |vwt-96|

created 2001 · complexity intermediate · version 7.0

==============================================================================

Ever want to capture the output of an ex command like `:set all` into a Vim 
text buffer for easy viewing? This is actually a very easy thing to 
accomplish!

You can use the `:redir` command to redirect the output of an ex command to a 
register and then paste the contents of the register into a Vim buffer.

For example:

>
    :redir @a
    :set all
    :redir END
<

Now, register 'a' will have the output of the "set all" ex command. You can 
paste this into a Vim buffer, using `"ap`.

You can also write a Vim function to do the above. Since you probably don't 
want your command output to mess up your carefully constructed window layout, 
this function will pipe the output of a command into a new tab, allowing you 
to simply close the tab when done. If you don't like using tab pages 
[https://vim.fandom.com/wiki/Using_tab_pages], or you don't have tab support 
because you didn't compile with it or your Vim version is less than 7.0, you 
could modify this function to use a new split window instead:

>
    function! TabMessage(cmd)
      redir => message
      silent execute a:cmd
      redir END
      if empty(message)
        echoerr "no output"
      else
        " use "new" instead of "tabnew" below if you prefer split windows instead of tabs
        tabnew
        setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
        silent put=message
      endif
    endfunction
    command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)
<

Example usage:

>
    :TabMessage highlight
<

Note that `:redir` can use a variable instead of a register, as shown above.

Note also that `:redir` will capture silenced messages as well. While this 
won't be problematic with most builtin commands that echo stuff that we are 
interested in, this is quite problematic when we execute a sequence of several 
commands. Since version 7.4-2008, Vim provides an `execute()` function that'll 
simplify things and avoid side-effects.

REFERENCES                                                 *vwt-95-references*
    - :help |:redir| 
    - :help |execute()| 


RELATED SCRIPTS                                       *vwt-95-related-scripts*
    - Decho [https://www.vim.org/scripts/script.php?script_id=120] 


COMMENTS                                                     *vwt-95-comments*

This may be obvious to experts, but it took me a very long time to figure it 
out, because Google searches on terms like 'pipe', 'buffer', 'shell', etc 
never brought it to my attention. However, you can pipe the contents of the 
file currently being edited (the current buffer) to a shell command, and 
replace the current file/buffer with the output of that command, using this:

>
    :%! [cmd]
<

That is, if you didn't know about the `:retab` command, you could expand tabs 
using basic Unix commands like `:%! expand -t 4`.

==============================================================================

The answer is (for example):

>
    :read !ls ~
<

and :help |:read| for more information.

==============================================================================

Here is a function that inserts the output of an Ex command into a split 
window:

>
    function! OutputSplitWindow(...)
      " this function output the result of the Ex command into a split scratch buffer
      let cmd = join(a:000, ' ')
      let temp_reg = @"
      redir @"
      silent! execute cmd
      redir END
      let output = copy(@")
      let @" = temp_reg
      if empty(output)
        echoerr "no output"
      else
        new
        setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted
        put! =output
      endif
    endfunction
    command! -nargs=+ -complete=command Output call OutputSplitWindow(<f-args>)
<

Example: :Output echo strftime("%H:%M")

I think I incorporated the useful stuff out of this script into the tip. I did not see much in the way of important differences, and in some ways the tip was better. --Fritzophrenic (talk) 18:00, June 3, 2015 (UTC)

==============================================================================

 vim:tw=78:et:ft=help:norl: