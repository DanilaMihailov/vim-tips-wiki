*vim-wiki-tips-717.txt*   Execute a shell command in the directory shown in file explorer *vwt-717*



Please review this tip:
    - This tip was imported from vim.org and needs general review [https://vim.fandom.com/wiki/Vim_Tips_Wiki:General_guidelines].
    - You might clean up comments [https://vim.fandom.com/wiki/Vim_Tips_Wiki:Comment_guidelines] or merge similar tips [https://vim.fandom.com/wiki/Vim_Tips_Wiki:Merge_guidelines].
    - Add suitable categories [https://vim.fandom.com/wiki/Vim_Tips_Wiki:Category_guidelines] so people can find the tip.
    - Please avoid the discussion page [https://vim.fandom.com/wiki/Vim_Tips_Wiki:Discussion_guidelines] (use the Comments section below for notes).
    - If the tip contains good advice for current Vim, remove the {{review}} line.
Tip 717 [https://vim.fandom.com/wiki/Execute_a_shell_command_in_the_directory_shown_in_file_explorer]   Previous |vwt-716| Next |vwt-718|

created 2004 · complexity basic · author Chao-Kuo Lin · version 6.0

==============================================================================

Even thought I can press "c" to switch directory if I want to execute a 
command in the directory that I am viewing with the explorer.vim plugin, but 
sometimes I don't want to actually change to that directory to execute it 
because I want to remain in whatever directory I am in such as a root 
directory of source files. So I opened up explorer.vim to see if I can add it 
directly to the plugin, but I found out that it can call a variable 
g:explFileHandler that stores the user defined function whenever the key 'x' 
is pressed on a file or directory. So I used that to implement executing a 
command in the viewing directory in my vimrc as follows:

>
    function! MyFileHandler(filename)
      let oldpath = getcwd()
      let currentdirectory = ""
      if(isdirectory(a:filename))
        let currentdirectory = strpart(a:filename, 0, strlen(a:filename) - 1)
      else
        let currentdirectory = a:filename
      endif
      let lastslash = strridx(currentdirectory, "/")
      let currentdirectory = strpart(currentdirectory, 0, lastslash)
      let usercommand = input(currentdirectory . "# ")
      if(strlen(usercommand) > 0)
        execute "cd " . currentdirectory
        execute "!" . usercommand
        execute "cd " . oldpath
      endif
    endfunction
    "
    let g:explFileHandler = "MyFileHandler"
<

It will prompt the user with the directory mimicking a shell prompt where the 
user can enter the command.

COMMENTS  *vwt-717-comments*

 vim:tw=78:et:ft=help:norl: