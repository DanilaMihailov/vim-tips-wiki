*vim-wiki-tips-613.txt*   Open the last edited file *vwt-613*

Tip 613 [https://vim.fandom.com/wiki/Open_the_last_edited_file]   Previous |vwt-610| Next |vwt-614|

created 2003 · complexity basic · author Adam Monsen · version 6.0

==============================================================================

The starting.txt help file (:help |starting.txt|) tells you how to open the 
last edited file in csh. In bash, do it like so:

>
    alias lvim='vim -c "normal '\''0"'
<

COMMENTS                                                    *vwt-613-comments*

With this in vimrc [https://vim.fandom.com/wiki/Vimrc], invoking Vim without 
arguments will open the last file (it will get the last file and position from 
.viminfo).

>
    " Go to last file if invoked without arguments.
    autocmd VimEnter * nested if
      \ argc() == 0 &&
      \ bufname("%") == "" &&
      \ bufname(2) != "" |
      \   exe "normal! `0" |
      \ endif
    
    " From vimrc_example.vim distributed with Vim 7.
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
<Why buffer 2? When you run `vim`, buffer 1 is always blank. Buffer 2 is the first buffer you had open last time you closed Vim.

==============================================================================

These make sure all your tabs are restored (VIM 7.x and higher).

>
    " Open last active file(s) if VIM is invoked without arguments.
    autocmd VimLeave * nested let buffernr = bufnr("$") |
        \ let buflist = [] |
        \ while buffernr > 0 |
        \	if buflisted(buffernr) |
        \	    let buflist += [ bufname(buffernr) ] |
        \	endif |
        \   let buffernr -= 1 |
        \ endwhile |
        \ if (!isdirectory($HOME . "/.vim")) |
        \	call mkdir($HOME . "/.vim") |
        \ endif |
        \ call writefile(reverse(buflist), $HOME . "/.vim/buflist.txt")
    
    autocmd VimEnter * nested if argc() == 0 && filereadable($HOME . "/.vim/buflist.txt") |
        \	for line in readfile($HOME . "/.vim/buflist.txt") |
        \	    if filereadable(line) |
        \		execute "tabedit " . line |
        \		set bufhidden=delete |
        \	    endif |
        \	endfor |
        \	tabclose 1 |
        \ endif
<

Am I missing something? Why can't you just use :mksession? :help :mksession --Fritzophrenic 02:00, 6 April 2009 (UTC)

==============================================================================

You are right. This works better.

>
    " Go to last file(s) if invoked without arguments.
    autocmd VimLeave * nested if (!isdirectory($HOME . "/.vim")) |
        \ call mkdir($HOME . "/.vim") |
        \ endif |
        \ execute "mksession! " . $HOME . "/.vim/Session.vim"
    
    autocmd VimEnter * nested if argc() == 0 && filereadable($HOME . "/.vim/Session.vim") |
        \ execute "source " . $HOME . "/.vim/Session.vim"
<

 vim:tw=78:et:ft=help:norl: