*vim-wiki-tips-282.txt*   Folding with Regular Expression *vwt-282*

Tip 282 [https://vim.fandom.com/wiki/Folding_with_Regular_Expression]   Previous |vwt-280| Next |vwt-283|

created 2002 · complexity basic · author Chris Butler · version 6.0

==============================================================================

When searching with /, it would sometimes be nice to fold everything except 
for matches to your search. The following code does this, providing two levels 
of folding to allow you to show some context around each search match as well.

LINE-BASED METHOD  *vwt-282-line-based-method*

USING A '/' SEARCH AND KEY MAPPING  *vwt-282-using-a-'/'-search-and-key-mapping*

Add the following to your vimrc [https://vim.fandom.com/wiki/Vimrc] to 
provide a mapping to fold on an already-performed search:

>
    nnoremap \z :setlocal foldexpr=(getline(v:lnum)=~@/)?0:(getline(v:lnum-1)=~@/)\\|\\|(getline(v:lnum+1)=~@/)?1:2 foldmethod=expr foldlevel=0 foldcolumn=2<CR>
<
    - The foldexpr is an extension of foldexpr=(getline(v:lnum)=~@/)?0:1 
    - The following options set the foldmethod to use the fold expression, and some 
      other convenient values. 


First search for a pattern, then fold everything else with \zUse zr to 
display more context, or zm to display less context.

USING A USER-DEFINED COMMAND  *vwt-282-using-a-user-defined-command*

If you want to search and fold with a single command, either add the 
following as well:

>
    command! -nargs=+ Foldsearch exe "normal /".<q-args>."^M\z"
<

Or get rid of the \z entirely:

>
    command! -nargs=+ Foldsearch exe "normal /".<q-args>."^M" | setlocal foldexpr=(getline(v:lnum)=~@/)?0:(getline(v:lnum-1)=~@/)\|\|(getline(v:lnum+1)=~@/)?1:2 foldmethod=expr foldlevel=0 foldcolumn=2
<

In these last two code segments, be sure to replace the "^M" with an actual 
CTRL-M (carriage return) character. Type :Folds[earch] <search string>[ENTER] 
to use this command. Use zr to display more context, use zm to display less 
context as before.

CUSTOMIZING  *vwt-282-customizing*

To add a second level of context, you could add this to the end of foldexpr:

>
    (getline(v:lnum-2)=~@/)\|\|(getline(v:lnum+2)=~@/)?2:3
<

but it will take longer as folded lines (the majority) evaluate the full 
expression.

If no context is desired at all, you can do the following instead:

>
    foldexpr=(getline(v:lnum)=~@/)?0:(getline(v:lnum)=~@/)\\|\\|(getline(v:lnum)=~@/)?0:1
<

SEARCH METHOD  *vwt-282-search-method*

The line-based method has a major drawback: matches that depend on surround 
lines for lookahead or lookbehind will not match. To solve that, use real 
searching in the foldexpr, inside a function, as follows:

>
    " command to fold everything except what you searched for
    command! -nargs=* Foldsearch
          \ if <q-args> != '' |
          \   exe "normal /".<q-args>."\<CR>" |
          \ endif |
          \ if @/ != '' |
          \   setlocal
          \     foldexpr=FoldRegex(v:lnum,@/,2)
          \     foldmethod=expr
          \     foldlevel=0 |
          \ endif
     
    function! FoldRegex(lnum,pat,context)
      " get start/end positions for context lines
      let startline=a:lnum-a:context
      while startline < 1
        let startline+=1
      endwhile
      let endline=a:lnum+a:context
      while endline > line('$')
        let endline-=1
      endwhile
     
      let returnval = 2
     
      let pos=getpos('.')
     
      " search from current line to get matches ON the line
      call cursor(a:lnum, 1)
      let matchline=search(a:pat,'cW',endline)
      if matchline==a:lnum
        let returnval = 0
      elseif matchline > 0
        " if current line didn't match, there could have been a match within
        " trailing context lines
        let returnval = 1
      else
        " if no match at current line, search leading context lines for a match
        call cursor(startline, 1)
        let matchline=search(a:pat,'cW',a:lnum)
        if matchline > 0
          let returnval = 1
        endif
      endif
     
      call setpos('.',pos)
     
      return returnval
    endfun
<

USES  *vwt-282-uses*

Aside from the possible convenience of seeing only the search terms and their 
immediate context, this method of folding can be used for practical purposes 
as well. For example, viewing a "quick and dirty" api of a source code file.

To make a command to do a quick Java API for example, use:

>
    " View the methods and variables in a java source file."
    command! Japi Foldsearch public\s\|protected\s\|private\s
<

Note that a better way to do this for languages that support it would be to 
use syntax highlighting. Check the syntax file 
[https://vim.fandom.com/wiki/Check_your_syntax_files_for_configurable_options] 
for the language in question to determine if this is an option. Many syntax 
files such as those for C, Perl, and VimL 
[https://vim.fandom.com/wiki/Syntax_folding_of_Vim_scripts] all define rules 
for at least some syntax-based folding, using :set foldmethod=syntax. Other 
languages such as Java do not currently have this functionality built in, so 
keep this idea around just in case you need it!

RELATED PLUGINS  *vwt-282-related-plugins*
    - script#158 [https://www.vim.org/scripts/script.php?script_id=158] 
    - script#318 [https://www.vim.org/scripts/script.php?script_id=318] 
    - script#2521 [https://www.vim.org/scripts/script.php?script_id=2521] 
    - script#2302 [https://www.vim.org/scripts/script.php?script_id=2302] 


SEE ALSO  *vwt-282-see-also*
    - Toggle a fold with a single keystroke |vwt-108| press space bar in normal 
      mode to toggle fold 
    - Delete all lines containing a pattern |vwt-213| to delete matching or 
      non-matching lines, rather than folding them 


COMMENTS  *vwt-282-comments*

TO DO
    - Explain better how the foldexpr string works. Convert it into a function? An 
      excellent idea, or use line continuations. The current state is very hard to 
      read (especially in IE where the scroll bar obscures part of the text). 


>
    :map   z/         :MFoldSearched<CR>:normal('zM')<CR>
    :amenu   M.Folding.MFoldSearched      :MFoldSearched
     command!           MFoldSearched :call MFoldSearched()
    function!          MFoldSearched()
      :setl  foldexpr=(getline(v:lnum)=~@/)?0:(getline(v:lnum-1)=~@/)\\|\\|(getline(v:lnum+1)=~@/)?1:2
      " This simpler expr hides the high-lighting.
      ":setl foldexpr=(getline(v:lnum)=~@/)?'>1':1
      :setl foldmethod=expr fen
    endfunc
<
    - Check if the comments in the original tip should be added (have they been 
      taken into account?). Yes, they have, though the link to the script should 
      probably be moved to a more prominent place. 
    - A quick test suggests that "\<CR>" can be used instead of an actual ^M (so we 
      should probably edit the tip in due course, although "\<CR>" possibly relies 
      on some non-compatibility setting). I think if people are using a crazy 
      setting that breaks things like "\<CR>" they should figure out how to fix the 
      consequences on their own. No harm in mentioning it though, I guess. 
    - Link to Folding for Quickfix |vwt-76|. 
    - Perhaps add following section (merged in from VimTip1022 |vwt-1022|). A very 
      quick test suggests it's ok. I like it. Probably add it as part of the 
      explanation, though. Maybe build up to the final expression gradually. 


SIMPLE FOLDING  *vwt-282-simple-folding*

After executing the following, you can search for a pattern then press F8 to 
fold misses.

>
    :set foldexpr=getline(v:lnum)!~@/
    :nnoremap <F8> :set foldmethod=expr<CR><Bar>zM
<

 vim:tw=78:et:ft=help:norl: