*vim-tips-wiki-982.txt*   Insert newline without entering insert mode   *vtw-982*

Tip 982 [https://vim.fandom.com/wiki/Insert_newline_without_entering_insert_mode]   Previous |vtw-981| Next |vtw-983|

created 2005 · complexity basic · author Christopher Auer · version 5.7

==============================================================================

As you all may know with 'o' or 'O' you can insert a new line after/before 
the current line. But both commands enter the insert mode, which may sometimes 
not be what you want. I put this in my vimrc-file to insert a new-line after 
the current line by pressing Enter (Shift-Enter for inserting a line before 
the current line):

>
    nmap <S-Enter> O<Esc>
    nmap <CR> o<Esc>
<

If you want to stay in the line where you have been before use the following 
maps:

>
    nmap <S-Enter> O<Esc>j
    nmap <CR> o<Esc>k
<

Note: On console versions, the <S-Enter> mapping might not work. In those 
settings, choose any other key you like instead of <S-Enter>, for example 
<C-o>.

If you want to replace the default behavior (using o and O):

>
    nnoremap o o<Esc>
    nnoremap O O<Esc>
<

SEE ALSO                                                    *vtw-982-see-also*
    - Use Return and Delete keys in normal mode like in insert mode 
      [https://vim.fandom.com/wiki/Use_Return_and_Delete_keys_in_normal_mode_like_in_insert_mode] 


COMMENTS                                                    *vtw-982-comments*

It's also a nice idea to map something like

>
    nnoremap <C-J> a<CR><Esc>k$
<

because it's the opposite of Shift-J. A more sophisticated solution would be

>
    nnoremap <C-J> ciW<CR><Esc>:if match( @", "^\\s*$") < 0<Bar>exec "norm P-$diw+"<Bar>endif<CR>
<

==============================================================================

For whatever reason, I was unable to get the suggest mapping with <S-Enter> 
and <CR> to work properly (both ended up inserting below). So I did:

>
    nmap <F8> o<Esc>
    nmap <F9> O<Esc>
<

Which works fine for me.

==============================================================================

<S-Enter> and <CR> will work separately in gvim but not in urxvt. See 
http://stackoverflow.com/questions/598113/can-terminals-detect-shift-enter-or-control-enter 
[http://stackoverflow.com/questions/598113/can-terminals-detect-shift-enter-or-control-enter]

==============================================================================

Referencing the above, the default terminal on MacOS returns ^M with all 
modifier keys.

If you don't use return to navigate in normal mode, you can remap two returns 
to insert a new line:

>
    :nmap <CR><CR> o<ESC>
<

==============================================================================

Since I have inoremap jj <Esc> in my `.vimrc`, it take not too much to type 
`ojj` or `Ojj`.

==============================================================================

To add a blank line below or above and keep the cursor in place, I think this 
is easiest:

>
    nnoremap <C-J> m`o<Esc>``
    nnoremap <C-K> m`O<Esc>``
<

It uses the jump list to remember the cursor position, so it does clutter up 
that list. But I don't mind.You could use any other mark, like so (uses mark 
a):

>
    nnoremap <C-J> mao<Esc>`a
    nnoremap <C-K> maO<Esc>`a
<

==============================================================================

==============================================================================

This mapping interferes with command execution in the command-line window. 
The command-line window can operate in normal or insert mode and in both <CR> 
executes the command from current line. Using `nmap` instead of `map` in the 
mapping declaration partially fixes the problem. Then, to execute the command, 
you must enter the insert mode and press <CR>. While this is a feasible 
workaround, I prefer to dispense with this mapping and type `oii` to insert a 
new line (`ii` being my map for <Esc>).

Excellent point! :map applies to too many modes, I went ahead and made it :nmap. For the other problem, we should edit the mapping to detect the command-line window, like in Syntax folding of Vim scripts. Probably this will need an <expr> form of the mapping to do easily. --Fritzophrenic (talk) 15:01, June 27, 2013 (UTC)

==============================================================================

Just use Tim Pope's excellent vim-unimpaired pluginThe plugin provides the 
following two mappings:[<Space> and ]<Space> add newlines before and after the 
cursor line.

https://github.com/tpope/vim-unimpaired 
[https://github.com/tpope/vim-unimpaired]

==============================================================================

If you want to create space where you already have an empty line, yanking the 
empty line and then paste it.

>
    yy 
     - on empty line
<

>
    p 
     - to paste a line below the cursor
    shift + p 
     - to paste a line above the cursor
<

>
    5 p 
     - to paste # empty lines below cursor
    5 shift + p 
     - to paste # empty lines above cursor
    
    note: the number is arbitrary
<

CATEGORIES                                                      *vtw-982-cats*

Usage |vtw-by-category-usage|


 vim:tw=78:et:ft=help:norl: