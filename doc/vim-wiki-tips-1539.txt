*vim-wiki-tips-1539.txt*   Exchanging adjacent words *vwt-1539*

Tip 1539 [https://vim.fandom.com/wiki/Exchanging_adjacent_words]   Previous |vwt-1538| Next |vwt-1540|

created 
[https://vim.fandom.com/wiki/Vim_Tips_Wiki:New_tips/200712#Exchanging_adjacent_words] 
2007 · complexity basic · author Michael Geddes 
[https://vim.fandom.com/wiki/User:Michaelrgeddes] · version 6.0

==============================================================================

Map a key combination to this regular expression: this transposes the keyword 
under the cursor with the next keyword, including skipping line breaks.

>
    s/\v(<\k*%#\k*>)(\_.{-})(<\k+>)/\3\2\1/
<

To replace the keyword under the cursor with the previous keyword (no line 
breaks), use:

>
    s/\v(<\k+>)(.{-})(<\k*%#\k*>)/\3\2\1/
<

I'm sure that a "previous word" version to handle line breaks can be done, 
especially if you relax the requirement of using \k to match keyword 
characters.

The traditional way to swap words is something like dawwp (see VimTip47 
|vwt-47|) or such movements. However these aren't a generic solution and only 
work where the delimiters are whitespace.

This approach is cleaner about leaving the surrounding non-keyword characters 
where they are, and works cleanly at the end of lines and over line breaks.

For example

>
    this->test
<

becomes

>
    test->this
<

It can also be used with other atoms such as [a-zA-Z0-9] which in some ways 
is simpler as it can be negated more easily (aiding with the 'reverse' case).

The trick for this tip is the %# atom, which matches the cursor position. 
This atom can easily be used in cases like this for acting on text under the 
cursor. Note the use of \v, "very magic" and of \_., "any character including 
newline".

REFERENCES                                               *vwt-1539-references*
    - :help |/\%#| 
    - :help |/\_.| 


COMMENTS                                                   *vwt-1539-comments*

 vim:tw=78:et:ft=help:norl: