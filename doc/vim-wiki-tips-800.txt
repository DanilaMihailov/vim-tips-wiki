*vim-wiki-tips-800.txt*   Sorting lines in a file based on the number of words in each line *vwt-800*

Tip 800 [https://vim.fandom.com/wiki/Sorting_lines_in_a_file_based_on_the_number_of_words_in_each_line]   Previous |vwt-799| Next |vwt-801|

created 2004 Â· complexity intermediate Â· version 6.0

==============================================================================

Here is one use of substitute with an expression (:help 
|sub-replace-expression|).

I needed to sort a file according to the number of words in each line. Using 
the :s command, I inserted the number of words each line contains, at the 
beginning of the line.

To simplify sorting (using the excellent VisSort 
[http://www.drchip.org/astronaut/vim/index.html#VISSORT]), instead of 
inserting a number, I put the corresponding character (number plus 64, so a 
line with one word will start with 'A').

Here is the expression I used:

>
    :%s/^.*/\=nr2char(strlen((substitute(substitute(submatch(0), "\\S\\+", "x", "g"), "\\s","","g")))+64) . "\t" . submatch(0)
<

Explanation, from the inside out:

Replace all consecutive non space by a single x (each word is now a single 
x):

>
    part1 = substitute(submatch(0), "\\S\\+", "x", "g")
<

Remove the spaces between "x":

>
    part2 = substitute(part1,"\\s","","g")
<

Count the number of "x":

>
    part3 = strlen(part2)
<

Get the ASCII char representing the number of words + 64:

>
    part4 = nr2char(part3+64)
<

I replace all lines (^.*) by that ASCII char, followed by a tab and the 
initial line itself.

I can then sort, then remove all characters between the beginning of lines 
and the first tab.

COMMENTS  *vwt-800-comments*

To sort all file:

>
    :sort
<

To remove prefix of letter and tab:

>
    %s_^.\t__
<

 vim:tw=78:et:ft=help:norl: